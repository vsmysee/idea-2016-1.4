/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.rpclib.schema;

import org.jetbrains.annotations.NotNull;
import com.android.tools.rpclib.binary.Decoder;
import com.android.tools.rpclib.binary.Encoder;
import java.io.IOException;

public final class TypeTag {
    public static final byte PrimitiveTag = 0;
    public static TypeTag primitiveTag() { return new TypeTag(PrimitiveTag); }
    public static final byte StructTag = 1;
    public static TypeTag structTag() { return new TypeTag(StructTag); }
    public static final byte PointerTag = 2;
    public static TypeTag pointerTag() { return new TypeTag(PointerTag); }
    public static final byte InterfaceTag = 3;
    public static TypeTag interfaceTag() { return new TypeTag(InterfaceTag); }
    public static final byte VariantTag = 4;
    public static TypeTag variantTag() { return new TypeTag(VariantTag); }
    public static final byte AnyTag = 5;
    public static TypeTag anyTag() { return new TypeTag(AnyTag); }
    public static final byte SliceTag = 6;
    public static TypeTag sliceTag() { return new TypeTag(SliceTag); }
    public static final byte ArrayTag = 7;
    public static TypeTag arrayTag() { return new TypeTag(ArrayTag); }
    public static final byte MapTag = 8;
    public static TypeTag mapTag() { return new TypeTag(MapTag); }

    public final byte value;

    public TypeTag(byte value) {
        this.value = value;
    }

    public void encode(@NotNull Encoder e) throws IOException {
        e.uint8(value);
    }

    public static TypeTag decode(@NotNull Decoder d) throws IOException {
        byte value = d.uint8();
        return new TypeTag(value);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || !(o instanceof TypeTag)) return false;
        return value == ((TypeTag)o).value;
    }

    @Override
    public int hashCode() {
        return value;
    }

    @Override
    public String toString() {
        switch(value) {
            case PrimitiveTag: return "PrimitiveTag";
            case StructTag: return "StructTag";
            case PointerTag: return "PointerTag";
            case InterfaceTag: return "InterfaceTag";
            case VariantTag: return "VariantTag";
            case AnyTag: return "AnyTag";
            case SliceTag: return "SliceTag";
            case ArrayTag: return "ArrayTag";
            case MapTag: return "MapTag";
            default: return "TypeTag(" + value + ")";
        }
    }
}
