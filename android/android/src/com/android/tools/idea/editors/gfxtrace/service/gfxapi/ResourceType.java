/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.gfxapi;

import org.jetbrains.annotations.NotNull;
import com.android.tools.rpclib.binary.Decoder;
import com.android.tools.rpclib.binary.Encoder;
import java.io.IOException;

public final class ResourceType {
  public static final int TypeUnknown = 0;
  public static ResourceType typeUnknown() { return new ResourceType(TypeUnknown); }
  public static final int TypeTexture1D = 1;
  public static ResourceType typeTexture1D() { return new ResourceType(TypeTexture1D); }
  public static final int TypeTexture2D = 2;
  public static ResourceType typeTexture2D() { return new ResourceType(TypeTexture2D); }
  public static final int TypeTexture3D = 3;
  public static ResourceType typeTexture3D() { return new ResourceType(TypeTexture3D); }
  public static final int TypeCubemap = 4;
  public static ResourceType typeCubemap() { return new ResourceType(TypeCubemap); }

  public final int value;

  public ResourceType(int value) {
    this.value = value;
  }

  public void encode(@NotNull Encoder e) throws IOException {
    e.int32(value);
  }

  public static ResourceType decode(@NotNull Decoder d) throws IOException {
    int value = d.int32();
    return new ResourceType(value);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || !(o instanceof ResourceType)) return false;
    return value == ((ResourceType)o).value;
  }

  @Override
  public int hashCode() {
    return value;
  }

  @Override
  public String toString() {
    switch(value) {
      case TypeUnknown: return "TypeUnknown";
      case TypeTexture1D: return "TypeTexture1D";
      case TypeTexture2D: return "TypeTexture2D";
      case TypeTexture3D: return "TypeTexture3D";
      case TypeCubemap: return "TypeCubemap";
      default: return "ResourceType(" + value + ")";
    }
  }
}
