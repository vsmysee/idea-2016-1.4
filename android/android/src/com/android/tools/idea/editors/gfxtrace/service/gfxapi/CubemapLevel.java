/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.gfxapi;

import com.android.tools.rpclib.schema.Entity;
import com.android.tools.rpclib.schema.Field;
import com.android.tools.rpclib.schema.Struct;
import org.jetbrains.annotations.NotNull;

import com.android.tools.rpclib.binary.BinaryClass;
import com.android.tools.rpclib.binary.BinaryObject;
import com.android.tools.rpclib.binary.Decoder;
import com.android.tools.rpclib.binary.Encoder;
import com.android.tools.rpclib.binary.Namespace;
import com.android.tools.idea.editors.gfxtrace.service.image.ImageInfo;

import java.io.IOException;

public final class CubemapLevel implements BinaryObject {
  //<<<Start:Java.ClassBody:1>>>
  private ImageInfo myNegativeX;
  private ImageInfo myPositiveX;
  private ImageInfo myNegativeY;
  private ImageInfo myPositiveY;
  private ImageInfo myNegativeZ;
  private ImageInfo myPositiveZ;

  // Constructs a default-initialized {@link CubemapLevel}.
  public CubemapLevel() {}


  public ImageInfo getNegativeX() {
    return myNegativeX;
  }

  public CubemapLevel setNegativeX(ImageInfo v) {
    myNegativeX = v;
    return this;
  }

  public ImageInfo getPositiveX() {
    return myPositiveX;
  }

  public CubemapLevel setPositiveX(ImageInfo v) {
    myPositiveX = v;
    return this;
  }

  public ImageInfo getNegativeY() {
    return myNegativeY;
  }

  public CubemapLevel setNegativeY(ImageInfo v) {
    myNegativeY = v;
    return this;
  }

  public ImageInfo getPositiveY() {
    return myPositiveY;
  }

  public CubemapLevel setPositiveY(ImageInfo v) {
    myPositiveY = v;
    return this;
  }

  public ImageInfo getNegativeZ() {
    return myNegativeZ;
  }

  public CubemapLevel setNegativeZ(ImageInfo v) {
    myNegativeZ = v;
    return this;
  }

  public ImageInfo getPositiveZ() {
    return myPositiveZ;
  }

  public CubemapLevel setPositiveZ(ImageInfo v) {
    myPositiveZ = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("gfxapi","CubemapLevel","","");

  static {
    ENTITY.setFields(new Field[]{
      new Field("NegativeX", new Struct(ImageInfo.Klass.INSTANCE.entity())),
      new Field("PositiveX", new Struct(ImageInfo.Klass.INSTANCE.entity())),
      new Field("NegativeY", new Struct(ImageInfo.Klass.INSTANCE.entity())),
      new Field("PositiveY", new Struct(ImageInfo.Klass.INSTANCE.entity())),
      new Field("NegativeZ", new Struct(ImageInfo.Klass.INSTANCE.entity())),
      new Field("PositiveZ", new Struct(ImageInfo.Klass.INSTANCE.entity())),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new CubemapLevel(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      CubemapLevel o = (CubemapLevel)obj;
      e.value(o.myNegativeX);
      e.value(o.myPositiveX);
      e.value(o.myNegativeY);
      e.value(o.myPositiveY);
      e.value(o.myNegativeZ);
      e.value(o.myPositiveZ);
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      CubemapLevel o = (CubemapLevel)obj;
      o.myNegativeX = new ImageInfo();
      d.value(o.myNegativeX);
      o.myPositiveX = new ImageInfo();
      d.value(o.myPositiveX);
      o.myNegativeY = new ImageInfo();
      d.value(o.myNegativeY);
      o.myPositiveY = new ImageInfo();
      d.value(o.myPositiveY);
      o.myNegativeZ = new ImageInfo();
      d.value(o.myNegativeZ);
      o.myPositiveZ = new ImageInfo();
      d.value(o.myPositiveZ);
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
