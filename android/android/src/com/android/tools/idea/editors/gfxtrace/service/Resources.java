/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service;

import com.android.tools.rpclib.schema.*;
import org.jetbrains.annotations.NotNull;

import com.android.tools.rpclib.binary.BinaryClass;
import com.android.tools.rpclib.binary.BinaryID;
import com.android.tools.rpclib.binary.BinaryObject;
import com.android.tools.rpclib.binary.Decoder;
import com.android.tools.rpclib.binary.Encoder;
import com.android.tools.rpclib.binary.Namespace;

import java.io.IOException;

public final class Resources implements BinaryObject {
  //<<<Start:Java.ClassBody:1>>>
  private ResourceInfo[] myTextures1D;
  private ResourceInfo[] myTextures2D;
  private ResourceInfo[] myTextures3D;
  private ResourceInfo[] myCubemaps;

  // Constructs a default-initialized {@link Resources}.
  public Resources() {}


  public ResourceInfo[] getTextures1D() {
    return myTextures1D;
  }

  public Resources setTextures1D(ResourceInfo[] v) {
    myTextures1D = v;
    return this;
  }

  public ResourceInfo[] getTextures2D() {
    return myTextures2D;
  }

  public Resources setTextures2D(ResourceInfo[] v) {
    myTextures2D = v;
    return this;
  }

  public ResourceInfo[] getTextures3D() {
    return myTextures3D;
  }

  public Resources setTextures3D(ResourceInfo[] v) {
    myTextures3D = v;
    return this;
  }

  public ResourceInfo[] getCubemaps() {
    return myCubemaps;
  }

  public Resources setCubemaps(ResourceInfo[] v) {
    myCubemaps = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("service","Resources","","");

  static {
    ENTITY.setFields(new Field[]{
      new Field("Textures1D", new Slice("", new Struct(ResourceInfo.Klass.INSTANCE.entity()))),
      new Field("Textures2D", new Slice("", new Struct(ResourceInfo.Klass.INSTANCE.entity()))),
      new Field("Textures3D", new Slice("", new Struct(ResourceInfo.Klass.INSTANCE.entity()))),
      new Field("Cubemaps", new Slice("", new Struct(ResourceInfo.Klass.INSTANCE.entity()))),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new Resources(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      Resources o = (Resources)obj;
      e.uint32(o.myTextures1D.length);
      for (int i = 0; i < o.myTextures1D.length; i++) {
        e.value(o.myTextures1D[i]);
      }
      e.uint32(o.myTextures2D.length);
      for (int i = 0; i < o.myTextures2D.length; i++) {
        e.value(o.myTextures2D[i]);
      }
      e.uint32(o.myTextures3D.length);
      for (int i = 0; i < o.myTextures3D.length; i++) {
        e.value(o.myTextures3D[i]);
      }
      e.uint32(o.myCubemaps.length);
      for (int i = 0; i < o.myCubemaps.length; i++) {
        e.value(o.myCubemaps[i]);
      }
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      Resources o = (Resources)obj;
      o.myTextures1D = new ResourceInfo[d.uint32()];
      for (int i = 0; i <o.myTextures1D.length; i++) {
        o.myTextures1D[i] = new ResourceInfo();
        d.value(o.myTextures1D[i]);
      }
      o.myTextures2D = new ResourceInfo[d.uint32()];
      for (int i = 0; i <o.myTextures2D.length; i++) {
        o.myTextures2D[i] = new ResourceInfo();
        d.value(o.myTextures2D[i]);
      }
      o.myTextures3D = new ResourceInfo[d.uint32()];
      for (int i = 0; i <o.myTextures3D.length; i++) {
        o.myTextures3D[i] = new ResourceInfo();
        d.value(o.myTextures3D[i]);
      }
      o.myCubemaps = new ResourceInfo[d.uint32()];
      for (int i = 0; i <o.myCubemaps.length; i++) {
        o.myCubemaps[i] = new ResourceInfo();
        d.value(o.myCubemaps[i]);
      }
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
