/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.path;

import com.android.tools.rpclib.schema.*;
import com.android.tools.rpclib.binary.*;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;

public final class FieldPath extends Path {
  @Override
  public StringBuilder stringPath(StringBuilder builder) {
    return myStruct.stringPath(builder).append(".").append(myName);
  }

  @Override
  public Path getParent() {
    return myStruct;
  }

  //<<<Start:Java.ClassBody:1>>>
  private Path myStruct;
  private String myName;

  // Constructs a default-initialized {@link FieldPath}.
  public FieldPath() {}


  public Path getStruct() {
    return myStruct;
  }

  public FieldPath setStruct(Path v) {
    myStruct = v;
    return this;
  }

  public String getName() {
    return myName;
  }

  public FieldPath setName(String v) {
    myName = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("path","Field","","");

  static {
    ENTITY.setFields(new Field[]{
      new Field("Struct", new Interface("Path")),
      new Field("Name", new Primitive("string", Method.String)),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new FieldPath(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      FieldPath o = (FieldPath)obj;
      e.object(o.myStruct.unwrap());
      e.string(o.myName);
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      FieldPath o = (FieldPath)obj;
      o.myStruct = Path.wrap(d.object());
      o.myName = d.string();
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
